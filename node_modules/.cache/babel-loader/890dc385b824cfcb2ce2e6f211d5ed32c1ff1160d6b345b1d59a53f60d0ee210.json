{"ast":null,"code":"import { MAX_ROWS, MAX_COLS, NO_OF_BOMBS } from \"../constants\";\nimport { CellValue, CellState } from \"../types\";\nexport const generateCells = () => {\n  let cells = [];\n\n  // generating all cells\n  for (let row = 0; row < MAX_ROWS; row++) {\n    cells.push([]);\n    for (let col = 0; col < MAX_COLS; col++) {\n      cells[row].push({\n        value: CellValue.none,\n        state: CellState.visible\n      });\n    }\n  }\n\n  // randomly put 10 bombs\n  let bombsPlaced = 0;\n  while (bombsPlaced < NO_OF_BOMBS) {\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\n    const currentCell = cells[randomRow][randomCol];\n    if (currentCell.value !== CellValue.bomb) {\n      cells = cells.map((row, rowIndex) => row.map((cell, colIndex) => {\n        if (randomRow === rowIndex && randomCol === colIndex) {\n          return {\n            ...cell,\n            value: CellValue.bomb\n          };\n        }\n        return cell;\n      }));\n      bombsPlaced++;\n    }\n  }\n  return cells;\n};","map":{"version":3,"names":["MAX_ROWS","MAX_COLS","NO_OF_BOMBS","CellValue","CellState","generateCells","cells","row","push","col","value","none","state","visible","bombsPlaced","randomRow","Math","floor","random","randomCol","currentCell","bomb","map","rowIndex","cell","colIndex"],"sources":["/Users/dr_frankenmiller/Projects/react-minesweeper/src/utils/index.ts"],"sourcesContent":["import { MAX_ROWS, MAX_COLS, NO_OF_BOMBS } from \"../constants\";\nimport { CellValue, CellState, Cell } from \"../types\";\n\nexport const generateCells = (): Cell[][] => {\n    let cells: Cell[][] = [];\n  \n    // generating all cells\n    for (let row = 0; row < MAX_ROWS; row++) {\n      cells.push([]);\n      for (let col = 0; col < MAX_COLS; col++) {\n        cells[row].push({\n          value: CellValue.none,\n          state: CellState.visible\n        });\n      }\n    }\n\n  // randomly put 10 bombs\n  let bombsPlaced = 0;\n  while (bombsPlaced < NO_OF_BOMBS) {\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\n\n    const currentCell = cells[randomRow][randomCol];\n    if (currentCell.value !== CellValue.bomb) {\n      cells = cells.map((row, rowIndex) =>\n        row.map((cell, colIndex) => {\n          if (randomRow === rowIndex && randomCol === colIndex) {\n            return {\n              ...cell,\n              value: CellValue.bomb\n            };\n          }\n          return cell;\n        })\n      );\n      bombsPlaced++;\n    }\n  }\n\n\n    return cells;\n};"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,cAAc;AAC9D,SAASC,SAAS,EAAEC,SAAS,QAAc,UAAU;AAErD,OAAO,MAAMC,aAAa,GAAG,MAAgB;EACzC,IAAIC,KAAe,GAAG,EAAE;;EAExB;EACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGP,QAAQ,EAAEO,GAAG,EAAE,EAAE;IACvCD,KAAK,CAACE,IAAI,CAAC,EAAE,CAAC;IACd,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGR,QAAQ,EAAEQ,GAAG,EAAE,EAAE;MACvCH,KAAK,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC;QACdE,KAAK,EAAEP,SAAS,CAACQ,IAAI;QACrBC,KAAK,EAAER,SAAS,CAACS;MACnB,CAAC,CAAC;IACJ;EACF;;EAEF;EACA,IAAIC,WAAW,GAAG,CAAC;EACnB,OAAOA,WAAW,GAAGZ,WAAW,EAAE;IAChC,MAAMa,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGlB,QAAQ,CAAC;IACtD,MAAMmB,SAAS,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGjB,QAAQ,CAAC;IAEtD,MAAMmB,WAAW,GAAGd,KAAK,CAACS,SAAS,CAAC,CAACI,SAAS,CAAC;IAC/C,IAAIC,WAAW,CAACV,KAAK,KAAKP,SAAS,CAACkB,IAAI,EAAE;MACxCf,KAAK,GAAGA,KAAK,CAACgB,GAAG,CAAC,CAACf,GAAG,EAAEgB,QAAQ,KAC9BhB,GAAG,CAACe,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,KAAK;QAC1B,IAAIV,SAAS,KAAKQ,QAAQ,IAAIJ,SAAS,KAAKM,QAAQ,EAAE;UACpD,OAAO;YACL,GAAGD,IAAI;YACPd,KAAK,EAAEP,SAAS,CAACkB;UACnB,CAAC;QACH;QACA,OAAOG,IAAI;MACb,CAAC,CAAC,CACH;MACDV,WAAW,EAAE;IACf;EACF;EAGE,OAAOR,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}